name: Docker Image Build and Push

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  NAMESPACE: hanxuning
  IMAGE_NAME: ai_test

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Get latest git tag
        id: get-latest-tag
        run: |
          latest_tag=$(git tag --sort=-creatordate | head -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v1.0.0"
          fi
          echo "latest_tag=${latest_tag}" >> $GITHUB_ENV
          echo "New version tag: $latest_tag"

      - name: Debug version tag
        run: |
          echo "Using version tag: ${{ env.latest_tag }}"

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.latest_tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          push: true
          file: ./docker/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Clean up old duplicate tags (using Aliyun registry API)
        run: |
          current_tag="${{ env.latest_tag }}"
          # 使用 Aliyun API 或 Docker CLI 删除远程重复标签
          echo "Deleting duplicate tags for image: ${current_tag}"
          # 列出所有远程标签并删除
          curl -u "${{ secrets.ALIYUN_REGISTRY_USERNAME }}:${{ secrets.ALIYUN_REGISTRY_PASSWORD }}" \
            -X GET "https://$REGISTRY/v2/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}/tags/list" \
            | jq -r ".tags[] | select(. != \"$current_tag\")" \
            | while read tag; do
                echo "Deleting tag $tag"
                curl -u "${{ secrets.ALIYUN_REGISTRY_USERNAME }}:${{ secrets.ALIYUN_REGISTRY_PASSWORD }}" \
                  -X DELETE "https://$REGISTRY/v2/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}/manifests/$(curl -s -u "${{ secrets.ALIYUN_REGISTRY_USERNAME }}:${{ secrets.ALIYUN_REGISTRY_PASSWORD }}" \
                    -X GET "https://$REGISTRY/v2/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}/manifests/$tag" | jq -r '.config.digest')"
              done
